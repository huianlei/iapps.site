// proto.go
package proto

import (
	"errors"
	"fmt"
	"log"
	"sync"
)

const (
	CG_LonginMessageId = uint16(1001)
	GC_LonginMessageId = uint16(1002)
	CG_HeartBeat       = uint16(1003)
)

const (
	// ok
	LONGIN_RET_OK            = int8(0)
	LONGIN_RET_INQUEUE       = int8(1)
	LONGIN_RET_INVALID_TOKEN = int8(2)
	LONGIN_RET_SERVER_FULL   = int8(3)
	LONGIN_RET_QUEUE_FULL    = int8(4)
	LONGIN_RET_ERROR         = int8(5)
)

type ProtoMessage interface {
	GetProtoId() uint16
	String() string
	//ParseFrom([]byte) (ProtoMessage,error)

	// build a new instance
	BuildNew() ProtoMessage
}

// ----------------------------------------------
// proto messge definitions (can be generated by tools in the future)
//
// ----------------------------------------------
type CG_LonginMessage struct {
	ProtoId    uint16
	AccId      string
	AccName    string
	OAuthToken string
}

func (cglm CG_LonginMessage) String() string {
	return fmt.Sprintf("CG_LonginMessage{ProtoId:%v,AccId:%v,AccName:%v}",
		cglm.ProtoId, cglm.AccId, cglm.AccName)
}

func (cglm CG_LonginMessage) GetProtoId() uint16 {
	return cglm.ProtoId
}

func (cglm CG_LonginMessage) BuildNew() ProtoMessage {
	log.Println("BuildNew CG_LonginMessage")
	return &CG_LonginMessage{}
}

type GC_LonginMessage struct {
	ProtoId uint16
	AccId   string
	RetCode int8
	ErrMsg  string
	RoleId  int64
	// queue index if in login queue
	QueueIndex int32
}

func (gclm GC_LonginMessage) String() string {
	return fmt.Sprintf("GC_LonginMessage[ProtoId:%d,AccId:%s,RetCode:%d,ErrMsg:%s]",
		gclm.ProtoId, gclm.AccId, gclm.RetCode, gclm.ErrMsg)
}

func (gclm GC_LonginMessage) GetProtoId() uint16 {
	return gclm.ProtoId
}

func (cglm GC_LonginMessage) BuildNew() ProtoMessage {
	return &GC_LonginMessage{}
}

// ----------------------------------------------
// proto messge definitions end
//
// ----------------------------------------------

// ----------------------------------------------
var protoManagerInstance *protoManager = nil
var once sync.Once

type protoManager struct {
	protos map[uint16]ProtoMessage
}

// create singletone
func GetProtoManagerIns() *protoManager {
	once.Do(func() {
		log.Println("== construct singleton of protoManagerInstance")
		if protoManagerInstance == nil {
			protoManagerInstance = &protoManager{
				protos: make(map[uint16]ProtoMessage, 10),
			}

			protoManagerInstance.init()
		}
	})

	return protoManagerInstance
}

// init called once. maybe auto regist by reflect in the future.
func (m *protoManager) init() {
	m.protos[CG_LonginMessageId] = CG_LonginMessage{}
	m.protos[GC_LonginMessageId] = GC_LonginMessage{}
}

func (m *protoManager) NewProto(protoId uint16) (ProtoMessage, error) {
	base, ok := m.protos[protoId]
	if !ok {
		return nil, errors.New(fmt.Sprintf("protoId=%d not registed!", protoId))
	}

	data, err := base.BuildNew(), error(nil)

	//log.Printf("NewProto protoId=%d  data -> %s \n", protoId, data.String())

	return data, err
}
